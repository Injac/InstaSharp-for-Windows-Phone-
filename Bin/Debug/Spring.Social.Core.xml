<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring.Social.Core</name>
    </assembly>
    <members>
        <member name="T:Spring.Social.IApiBinding">
            <summary>
            Base interface that may be implemented by API bindings.
            Provides a simple boolean tester that can be used to determine if the API binding has been authorized for a specific user.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="P:Spring.Social.IApiBinding.IsAuthorized">
            <summary>
            Returns true if this API binding has been authorized on behalf of a specific user.
            </summary>
            <remarks>
            If so, calls to the API are signed with the user's authorization credentials, indicating an application is invoking the API on a user's behalf. 
            If not, API calls do not contain any user authorization information. 
            Callers can use this status flag to determine if API operations requiring authorization can be invoked.
            </remarks>
        </member>
        <member name="T:Spring.Social.IServiceProvider`1">
            <summary>
            Top-level marker interface defining a ServiceProvider.
            A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user.
            </summary>
            <remarks>
            For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald".
            Defines a single parameterized type T representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application.
            Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2.
            </remarks>
            <typeparam name="T">The service provider's API type.</typeparam>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="T:Spring.Social.OAuth1.AbstractOAuth1ApiBinding">
            <summary>
            Base class for OAuth1-based provider API bindings.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth1.AbstractOAuth1ApiBinding.#ctor">
            <summary>
            Constructs the API template without user authorization. 
            This is useful for accessing operations on a provider's API that do not require user authorization.
            </summary>
        </member>
        <member name="M:Spring.Social.OAuth1.AbstractOAuth1ApiBinding.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="accessToken">The access token.</param>
            <param name="accessTokenSecret">The access token secret.</param>
        </member>
        <member name="M:Spring.Social.OAuth1.AbstractOAuth1ApiBinding.GetMessageConverters">
            <summary>
            Returns a list of <see cref="T:Spring.Http.Converters.IHttpMessageConverter"/>s to be used by the internal <see cref="P:Spring.Social.OAuth1.AbstractOAuth1ApiBinding.RestTemplate"/>.
            </summary>
            <remarks>
            Override this method to add additional message converters or to replace the default list of message converters. 
            By default, this includes a <see cref="T:Spring.Http.Converters.StringHttpMessageConverter"/> and a <see cref="T:Spring.Http.Converters.FormHttpMessageConverter"/>.
            </remarks>
            <returns>
            The list of <see cref="T:Spring.Http.Converters.IHttpMessageConverter"/>s to be used by the internal <see cref="P:Spring.Social.OAuth1.AbstractOAuth1ApiBinding.RestTemplate"/>.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth1.AbstractOAuth1ApiBinding.ConfigureRestTemplate(Spring.Rest.Client.RestTemplate)">
            <summary>
            Enables customization of the RestTemplate used to consume provider API resources.
            </summary>
            <remarks>
            An example use case might be to configure a custom error handler. 
            Note that this method is called after the RestTemplate has been configured with the message converters returned from GetMessageConverters().
            </remarks>
            <param name="restTemplate">The RestTemplate to configure.</param>
        </member>
        <member name="P:Spring.Social.OAuth1.AbstractOAuth1ApiBinding.RestTemplate">
            <summary>
            Gets a reference to the REST client backing this API binding and used to perform API calls. 
            </summary>
            <remarks>
            Callers may use the RestTemplate to invoke other API operations not yet modeled by the binding interface. 
            Callers may also modify the configuration of the RestTemplate to support unit testing the API binding with a mock server in a test environment. 
            During construction, subclasses may apply customizations to the RestTemplate needed to invoke a specific API.
            </remarks>
        </member>
        <member name="P:Spring.Social.OAuth1.AbstractOAuth1ApiBinding.IsAuthorized">
            <summary>
            Returns true if this API binding has been authorized on behalf of a specific user.
            </summary>
            <remarks>
            If so, calls to the API are signed with the user's authorization credentials, indicating an application is invoking the API on a user's behalf. 
            If not, API calls do not contain any user authorization information. 
            Callers can use this status flag to determine if API operations requiring authorization can be invoked.
            </remarks>
        </member>
        <member name="T:Spring.Social.OAuth1.AbstractOAuth1ServiceProvider`1">
            <summary>
            Base class for ServiceProviders that use the OAuth1 protocol.
            OAuth1-based ServiceProvider implementations should extend and implement <see cref="M:GetApi(string, string)"/>.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
            <typeparam name="T">The service API type</typeparam>
        </member>
        <member name="T:Spring.Social.OAuth1.IOAuth1ServiceProvider`1">
            <summary>
            A ServiceProvider that uses the OAuth 1.0 protocol.
            </summary>
            <typeparam name="T">The service provider's API type.</typeparam>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth1.IOAuth1ServiceProvider`1.GetApi(System.String,System.String)">
            <summary>
            Returns an API interface allowing the client application to access protected resources on behalf of a user.
            </summary>
            <param name="accessToken">The API access token.</param>
            <param name="secret">The access token secret.</param>
            <returns>A binding to the service provider's API.</returns>
        </member>
        <member name="P:Spring.Social.OAuth1.IOAuth1ServiceProvider`1.OAuthOperations">
            <summary>
            Gets the service interface for carrying out the "OAuth dance" with this provider. 
            The result of the OAuth dance is an access token that can be used to obtain an API binding with <see cref="M:GetApi(string,string)"/> method.
            </summary>
        </member>
        <member name="M:Spring.Social.OAuth1.AbstractOAuth1ServiceProvider`1.#ctor(System.String,System.String,Spring.Social.OAuth1.IOAuth1Operations)">
            <summary>
            Creates a new AbstractOAuth1ServiceProvider.
            </summary>
            <param name="consumerKey">The consumer (or client) key assigned to the application by the provider.</param>
            <param name="consumerSecret">the consumer (or client) secret assigned to the application by the provider.</param>
            <param name="oauth1Operations">
            The OAuth2Operations template for conducting the OAuth 2 flow with the provider.
            </param>
        </member>
        <member name="M:Spring.Social.OAuth1.AbstractOAuth1ServiceProvider`1.GetApi(System.String,System.String)">
            <summary>
            Returns an API interface allowing the client application to access protected resources on behalf of a user.
            </summary>
            <param name="accessToken">The API access token.</param>
            <param name="secret">The access token secret.</param>
            <returns>A binding to the service provider's API.</returns>
        </member>
        <member name="P:Spring.Social.OAuth1.AbstractOAuth1ServiceProvider`1.ConsumerKey">
            <summary>
            Gets the consumer (or client) key assigned to the application by the provider.
            </summary>
            <remarks>
            Exposed to subclasses to support constructing service API instances.
            </remarks>
        </member>
        <member name="P:Spring.Social.OAuth1.AbstractOAuth1ServiceProvider`1.ConsumerSecret">
            <summary>
            Gets the consumer (or client) secret assigned to the application by the provider.
            </summary>
            <remarks>
            Exposed to subclasses to support constructing service API instances.
            </remarks>
        </member>
        <member name="P:Spring.Social.OAuth1.AbstractOAuth1ServiceProvider`1.OAuthOperations">
            <summary>
            Gets the service interface for carrying out the "OAuth dance" with this provider. 
            The result of the OAuth dance is an access token that can be used to obtain an API binding with <see cref="M:GetApi(string, string)"/> method.
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth1.AuthorizedRequestToken">
            <summary>
            An OAuth 1.0 request token that has been authorized by the user.
            </summary>
            <remarks>
            Constructed after the user grants the consumer application access to their data hosted at the service provider.
            This is typically achieved by the user clicking "Allow" over at the provider's site.
            The service provider returns a Verifier string in the authorization callback that must also be submitted in the access token request.
            </remarks>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth1.AuthorizedRequestToken.#ctor(Spring.Social.OAuth1.OAuthToken,System.String)">
            <summary>
            Creates an authorized request token.
            </summary>
            <param name="requestToken">The request token object.</param>
            <param name="verifier">The access token verifier.</param>
        </member>
        <member name="P:Spring.Social.OAuth1.AuthorizedRequestToken.Value">
            <summary>
            Gets the request token value.
            </summary>
        </member>
        <member name="P:Spring.Social.OAuth1.AuthorizedRequestToken.Secret">
            <summary>
            Gets the request token secret.
            </summary>
        </member>
        <member name="P:Spring.Social.OAuth1.AuthorizedRequestToken.Verifier">
            <summary>
            Gets the verifier string generated by the provider.
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth1.IOAuth1Operations">
            <summary>
            A service interface for the OAuth 1 flow. 
            This interface allows you to conduct the "OAuth dance" with a service provider on behalf of a user.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth1.IOAuth1Operations.BuildAuthorizeUrl(System.String,Spring.Social.OAuth1.OAuth1Parameters)">
            <summary>
            Construct the URL to redirect the user to for authorization.
            </summary>
            <param name="requestToken">The request token value, to be encoded in the authorize URL.</param>
            <param name="parameters">Parameters to pass to the provider in the authorize URL. May be null.</param>
            <returns>The absolute authorize URL to redirect the user to for authorization.</returns>
        </member>
        <member name="M:Spring.Social.OAuth1.IOAuth1Operations.BuildAuthenticateUrl(System.String,Spring.Social.OAuth1.OAuth1Parameters)">
            <summary>
            Construct the URL to redirect the user to for authentication. 
            The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times. 
            This provides a better user experience for "Sign in with Provider" scenarios.
            </summary>
            <param name="requestToken">The request token value, to be encoded in the authorize URL.</param>
            <param name="parameters">Parameters to pass to the provider in the authenticate URL. May be null.</param>
            <returns>The absolute authenticate URL to redirect the user to for authentication.</returns>
        </member>
        <member name="M:Spring.Social.OAuth1.IOAuth1Operations.FetchRequestTokenAsync(System.String,Spring.Collections.Specialized.NameValueCollection,System.Action{Spring.Rest.Client.RestOperationCompletedEventArgs{Spring.Social.OAuth1.OAuthToken}})">
            <summary>
            Asynchronously begin a new authorization flow by fetching a new request token from this service provider.
            </summary>
            <remarks>
            The request token should be stored in the user's session up until the authorization callback is made 
            and it's time to exchange it for an <see cref="M:ExchangeForAccessToken(AuthorizedRequestToken, NameValueCollection)">access token</see>.
            </remarks>
            <param name="callbackUrl">
            The URL the provider should redirect to after the member authorizes the connection. Ignored for OAuth 1.0 providers.
            </param>
            <param name="additionalParameters">
            Any additional query parameters to be sent when fetching the request token.
            </param>
            <param name="operationCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous request completes. 
            Provides the temporary request token used for authorization and exchanged for an access token.
            </param>
            <returns>
            A <see cref="T:Spring.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth1.IOAuth1Operations.ExchangeForAccessTokenAsync(Spring.Social.OAuth1.AuthorizedRequestToken,Spring.Collections.Specialized.NameValueCollection,System.Action{Spring.Rest.Client.RestOperationCompletedEventArgs{Spring.Social.OAuth1.OAuthToken}})">
            <summary>
            Asynchronously exchange the authorized request token for an access token.
            </summary>
            <param name="requestToken">
            An authorized request token and verifier. The verifier will be ignored for OAuth 1.0 providers
            </param>
            <param name="additionalParameters">
            Any additional query parameters to be sent when fetching the access token.
            </param>
            <param name="operationCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous request completes. 
            Provides the access token.
            </param>
            <returns>
            A <see cref="T:Spring.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="P:Spring.Social.OAuth1.IOAuth1Operations.Version">
            <summary>
            Gets the version of OAuth1 implemented by this operations instance.
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth1.OAuth1Parameters">
            <summary>
            Parameters for building an OAuth1 authorize URL.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Parameters.#ctor">
            <summary>
            Creates a new, empty instance of the <see cref="T:Spring.Social.OAuth1.OAuth1Parameters"/> class. 
            Use properties to add parameters after construction.
            </summary>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Parameters.GetFirst(System.String)">
            <summary>
            Returns the first value for the given key.
            </summary>
            <param name="key">The key.</param>
            <returns>The first value for the specified key, or <see langword="null"/>.</returns>
        </member>
        <member name="P:Spring.Social.OAuth1.OAuth1Parameters.CallbackUrl">
            <summary>
            Gets or sets the authorization callback url.
            <para/>
            This value must be included for OAuth 1.0 providers (and NOT for OAuth 1.0a).
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth1.OAuth1RequestInterceptor">
            <summary>
            <see cref="T:Spring.Http.Client.Interceptor.IClientHttpRequestBeforeInterceptor"/> implementation that performs OAuth1 request signing 
            before a request for a protected resource is executed.
            </summary>
            <author>Keith Donald</author>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1RequestInterceptor.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an OAuth 1.0 protected resource request interceptor.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="accessToken">The access token.</param>
            <param name="accessTokenSecret">The access token secret.</param>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1RequestInterceptor.BeforeExecute(Spring.Http.Client.Interceptor.IClientHttpRequestContext)">
            <summary>
            The callback method before the given request is executed.
            </summary>
            <remarks>
            This implementation adds the "Authorization" header to the request.
            </remarks>
            <param name="request">The request context.</param>
        </member>
        <member name="T:Spring.Social.OAuth1.OAuth1Template">
            <summary>
            <see cref="T:Spring.Social.OAuth1.IOAuth1Operations"/> implementation that uses REST template to make the OAuth calls.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an OAuth1Template in OAuth 1.0a mode.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="requestTokenUrl">The request token URL.</param>
            <param name="authorizeUrl">The authorize URL.</param>
            <param name="accessTokenUrl">The access token URL.</param>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.#ctor(System.String,System.String,System.String,System.String,System.String,Spring.Social.OAuth1.OAuth1Version)">
            <summary>
            Creates an OAuth1Template.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="requestTokenUrl">The request token URL.</param>
            <param name="authorizeUrl">The authorize URL.</param>
            <param name="accessTokenUrl">The access token URL.</param>
            <param name="version">The version of OAuth 1, either 10 or 10a.</param>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an OAuth1Template in OAuth 1.0a mode.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="requestTokenUrl">The request token URL.</param>
            <param name="authorizeUrl">The authorize URL.</param>
            <param name="authenticateUrl">The authenticate URL.</param>
            <param name="accessTokenUrl">The access token URL.</param>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Spring.Social.OAuth1.OAuth1Version)">
            <summary>
            Creates an OAuth1Template.
            </summary>
            <param name="consumerKey">The application's consumer key.</param>
            <param name="consumerSecret">The application's consumer secret.</param>
            <param name="requestTokenUrl">The request token URL.</param>
            <param name="authorizeUrl">The authorize URL.</param>
            <param name="authenticateUrl">The authenticate URL.</param>
            <param name="accessTokenUrl">The access token URL.</param>
            <param name="version">The version of OAuth 1, either 10 or 10a.</param>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.BuildAuthorizeUrl(System.String,Spring.Social.OAuth1.OAuth1Parameters)">
            <summary>
            Construct the URL to redirect the user to for authorization.
            </summary>
            <param name="requestToken">The request token value, to be encoded in the authorize URL</param>
            <param name="parameters">Parameters to pass to the provider in the authorize URL. May be null.</param>
            <returns>The absolute authorize URL to redirect the user to for authorization</returns>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.BuildAuthenticateUrl(System.String,Spring.Social.OAuth1.OAuth1Parameters)">
            <summary>
            Construct the URL to redirect the user to for authentication. 
            The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times. 
            This provides a better user experience for "Sign in with Provider" scenarios.
            </summary>
            <param name="requestToken">The request token value, to be encoded in the authorize URL</param>
            <param name="parameters">Parameters to pass to the provider in the authenticate URL. May be null.</param>
            <returns>The absolute authenticate URL to redirect the user to for authentication</returns>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.FetchRequestTokenAsync(System.String,Spring.Collections.Specialized.NameValueCollection,System.Action{Spring.Rest.Client.RestOperationCompletedEventArgs{Spring.Social.OAuth1.OAuthToken}})">
            <summary>
            Asynchronously begin a new authorization flow by fetching a new request token from this service provider.
            </summary>
            <remarks>
            The request token should be stored in the user's session up until the authorization callback is made 
            and it's time to exchange it for an <see cref="M:ExchangeForAccessToken(AuthorizedRequestToken, NameValueCollection)">access token</see>.
            </remarks>
            <param name="callbackUrl">
            The URL the provider should redirect to after the member authorizes the connection. Ignored for OAuth 1.0 providers.
            </param>
            <param name="additionalParameters">
            Any additional query parameters to be sent when fetching the request token.
            </param>
            <param name="operationCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous request completes. 
            Provides the temporary request token used for authorization and exchanged for an access token.
            </param>
            <returns>
            A <see cref="T:Spring.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.ExchangeForAccessTokenAsync(Spring.Social.OAuth1.AuthorizedRequestToken,Spring.Collections.Specialized.NameValueCollection,System.Action{Spring.Rest.Client.RestOperationCompletedEventArgs{Spring.Social.OAuth1.OAuthToken}})">
            <summary>
            Asynchronously exchange the authorized request token for an access token.
            </summary>
            <param name="requestToken">
            An authorized request token and verifier. The verifier will be ignored for OAuth 1.0 providers
            </param>
            <param name="additionalParameters">
            Any additional query parameters to be sent when fetching the access token.
            </param>
            <param name="operationCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous request completes. 
            Provides the access token.
            </param>
            <returns>
            A <see cref="T:Spring.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.CreateOAuthToken(System.String,System.String,Spring.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates an <see cref="T:Spring.Social.OAuth1.OAuthToken"/> given the response from the request token or access token exchange with the provider. 
            May be overridden to create a custom <see cref="T:Spring.Social.OAuth1.OAuthToken"/>.
            </summary>
            <param name="tokenValue">The token value received from the provider.</param>
            <param name="tokenSecret">The token secret received from the provider.</param>
            <param name="response">All parameters from the response received in the request/access token exchange.</param>
            <returns>An <see cref="T:Spring.Social.OAuth1.OAuthToken"/></returns>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.AddCustomAuthorizationParameters(Spring.Collections.Specialized.NameValueCollection)">
            <summary>
            Allows to add custom authorization parameters to the authorization URL.
            <para/>
            May be overridden to return any provider-specific parameters that must be passed in the request to the authorization URL.
            </summary>
            <remarks>
            Default implementation adds no parameters.
            </remarks>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuth1Template.CreateRestTemplate">
            <summary>
            Creates the <see cref="P:Spring.Social.OAuth1.OAuth1Template.RestTemplate"/> used to communicate with the provider's OAuth1 API.
            </summary>
            <remarks>
            This implementation creates a RestTemplate with a minimal set of HTTP message converters: <see cref="T:Spring.Http.Converters.FormHttpMessageConverter"/>. 
            May be overridden to customize how the RestTemplate is created. 
            For example, if the provider returns data in some format other than JSON for form-encoded, you might override to register an appropriate message converter. 
            </remarks>
            <returns>The RestTemplate used to perform OAuth1 calls.</returns>
        </member>
        <member name="P:Spring.Social.OAuth1.OAuth1Template.RestTemplate">
            <summary>
            Gets a reference to the REST client used to perform OAuth1 calls. 
            </summary>
        </member>
        <member name="P:Spring.Social.OAuth1.OAuth1Template.Version">
            <summary>
            Gets the version of OAuth1 implemented by this operations instance.
            </summary>
        </member>
        <member name="P:Spring.Social.OAuth1.OAuth1Template.ConsumerKey">
            <summary>
            Gets the consumer key to be read by subclasses. 
            <para/>
            This may be useful when overriding <see cref="M:AddCustomAuthorizationParameters"/> and 
            the consumer key is required in the authorization request.
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth1.OAuth1Version">
            <summary>
            Various versions of the OAuth1 Core specification.
            </summary>
            <remarks>
            Used by <see cref="T:Spring.Social.OAuth1.OAuth1Template"/> to vary behavior its by the configured version.
            </remarks>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:Spring.Social.OAuth1.OAuth1Version.Core10">
            <summary>
            OAuth Core Version 1.0.
            </summary>       
        </member>
        <member name="F:Spring.Social.OAuth1.OAuth1Version.Core10a">
            <summary>
            OAuth Core Version 1.0 Revision A.
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth1.OAuthToken">
            <summary>
            Holds an OAuth token and secret. 
            Used for both the request token and access token.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth1.OAuthToken.#ctor(System.String,System.String)">
            <summary>
            Creates a new OAuth token with a token value and secret.
            </summary>
            <param name="value">The token value.</param>
            <param name="secret">The token secret.</param>
        </member>
        <member name="P:Spring.Social.OAuth1.OAuthToken.Value">
            <summary>
            Gets the token value.
            </summary>
        </member>
        <member name="P:Spring.Social.OAuth1.OAuthToken.Secret">
            <summary>
            Gets the token secret.
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth2.AbstractOAuth2ApiBinding">
            <summary>
            Base class for OAuth2-based provider API bindings.
            </summary>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth2.AbstractOAuth2ApiBinding.#ctor">
            <summary>
            Constructs the API template without user authorization. 
            This is useful for accessing operations on a provider's API that do not require user authorization.
            </summary>
        </member>
        <member name="M:Spring.Social.OAuth2.AbstractOAuth2ApiBinding.#ctor(System.String)">
            <summary>
            Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user.
            </summary>
            <param name="accessToken">The access token.</param>
        </member>
        <member name="M:Spring.Social.OAuth2.AbstractOAuth2ApiBinding.GetOAuth2Version">
            <summary>
            Returns the version of OAuth2 the API implements. 
            </summary>
            <remarks>
            Subclasses may override to return another version.
            </remarks>
            <returns>
            By default, returns OAuth2Version.Bearer indicating versions of OAuth2 that apply the bearer token scheme.
            </returns>
            <see cref="T:Spring.Social.OAuth2.OAuth2Version"/>
        </member>
        <member name="M:Spring.Social.OAuth2.AbstractOAuth2ApiBinding.GetMessageConverters">
            <summary>
            Returns a list of <see cref="T:Spring.Http.Converters.IHttpMessageConverter"/>s to be used by the internal <see cref="P:Spring.Social.OAuth2.AbstractOAuth2ApiBinding.RestTemplate"/>.
            </summary>
            <remarks>
            Override this method to add additional message converters or to replace the default list of message converters. 
            By default, this includes a <see cref="T:Spring.Http.Converters.StringHttpMessageConverter"/> and a <see cref="T:Spring.Http.Converters.FormHttpMessageConverter"/>.
            </remarks>
            <returns>
            The list of <see cref="T:Spring.Http.Converters.IHttpMessageConverter"/>s to be used by the internal <see cref="P:Spring.Social.OAuth2.AbstractOAuth2ApiBinding.RestTemplate"/>.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth2.AbstractOAuth2ApiBinding.ConfigureRestTemplate(Spring.Rest.Client.RestTemplate)">
            <summary>
            Enables customization of the RestTemplate used to consume provider API resources.
            </summary>
            <remarks>
            An example use case might be to configure a custom error handler. 
            Note that this method is called after the RestTemplate has been configured with the message converters returned from GetMessageConverters().
            </remarks>
            <param name="restTemplate">The RestTemplate to configure.</param>
        </member>
        <member name="P:Spring.Social.OAuth2.AbstractOAuth2ApiBinding.RestTemplate">
            <summary>
            Gets a reference to the REST client backing this API binding and used to perform API calls. 
            </summary>
            <remarks>
            Callers may use the RestTemplate to invoke other API operations not yet modeled by the binding interface. 
            Callers may also modify the configuration of the RestTemplate to support unit testing the API binding with a mock server in a test environment. 
            During construction, subclasses may apply customizations to the RestTemplate needed to invoke a specific API.
            </remarks>
        </member>
        <member name="P:Spring.Social.OAuth2.AbstractOAuth2ApiBinding.IsAuthorized">
            <summary>
            Returns true if this API binding has been authorized on behalf of a specific user.
            </summary>
            <remarks>
            If so, calls to the API are signed with the user's authorization credentials, indicating an application is invoking the API on a user's behalf. 
            If not, API calls do not contain any user authorization information. 
            Callers can use this status flag to determine if API operations requiring authorization can be invoked.
            </remarks>
        </member>
        <member name="T:Spring.Social.OAuth2.AbstractOAuth2ServiceProvider`1">
            <summary>
            Base class for ServiceProviders that use the OAuth2 protocol.
            OAuth2-based ServiceProvider implementations should extend and implement <see cref="M:GetApi(string)"/>.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
            <typeparam name="T">The service API type.</typeparam>
        </member>
        <member name="T:Spring.Social.OAuth2.IOAuth2ServiceProvider`1">
            <summary>
            A ServiceProvider that uses the OAuth 2.0 protocol.
            </summary>
            <typeparam name="T">The service provider's API type.</typeparam>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth2.IOAuth2ServiceProvider`1.GetApi(System.String)">
            <summary>
            Returns an API interface allowing the client application to access protected resources on behalf of a user.
            </summary>
            <param name="accessToken">The API access token.</param>
            <returns>A binding to the service provider's API.</returns>
        </member>
        <member name="P:Spring.Social.OAuth2.IOAuth2ServiceProvider`1.OAuthOperations">
            <summary>
            Gets the service interface for carrying out the "OAuth dance" with this provider. 
            The result of the OAuth dance is an access token that can be used to obtain an API binding with <see cref="M:GetApi(string)"/> method.
            </summary>
        </member>
        <member name="M:Spring.Social.OAuth2.AbstractOAuth2ServiceProvider`1.#ctor(Spring.Social.OAuth2.IOAuth2Operations)">
            <summary>
            Creates a new AbstractOAuth2ServiceProvider.
            </summary>
            <param name="oauth2Operations">
            The OAuth2Operations template for conducting the OAuth 2 flow with the provider.
            </param>
        </member>
        <member name="M:Spring.Social.OAuth2.AbstractOAuth2ServiceProvider`1.GetApi(System.String)">
            <summary>
            Returns an API interface allowing the client application to access protected resources on behalf of a user.
            </summary>
            <param name="accessToken">The API access token.</param>
            <returns>A binding to the service provider's API.</returns>
        </member>
        <member name="P:Spring.Social.OAuth2.AbstractOAuth2ServiceProvider`1.OAuthOperations">
            <summary>
            Gets the service interface for carrying out the "OAuth dance" with this provider. 
            The result of the OAuth dance is an access token that can be used to obtain an API binding with <see cref="M:GetApi(string)"/> method.
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth2.AccessGrant">
            <summary>
            Represents an OAuth2 access token.
            </summary>
            <author>Keith Donald</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth2.AccessGrant.#ctor(System.String)">
            <summary>
            Creates a new OAuth2 access token.
            </summary>
            <param name="accessToken">The access token value.</param>
        </member>
        <member name="M:Spring.Social.OAuth2.AccessGrant.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new OAuth2 access token.
            </summary>
            <param name="accessToken">The access token value.</param>
            <param name="scope">The scope of the access grant.</param>
            <param name="refreshToken">The refresh token that can be used to renew the access token.</param>
            <param name="expiresIn">The lifetime in seconds of the access token from the time the response was generated.</param>
        </member>
        <member name="P:Spring.Social.OAuth2.AccessGrant.AccessToken">
            <summary>
            Gets the access token value.
            </summary>
        </member>
        <member name="P:Spring.Social.OAuth2.AccessGrant.Scope">
            <summary>
            Gets the scope of the access grant.
            May be null if the provider doesn't return the granted scope in the response.
            </summary>
        </member>
        <member name="P:Spring.Social.OAuth2.AccessGrant.RefreshToken">
            <summary>
            Gets the refresh token that can be used to renew the access token. 
            May be null if the provider does not support refresh tokens.
            </summary>
        </member>
        <member name="P:Spring.Social.OAuth2.AccessGrant.ExpireTime">
            <summary>
            Gets the <see cref="T:System.DateTime"/> (in UTC) when this access grant will expire. 
            May be null if the token is non-expiring.
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth2.GrantType">
            <summary>
            OAuth2 supports two types of authorization flow, 
            typically referred to as "Client-side" and "Server-side".
            </summary>
            <author>Roy Clarkson</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:Spring.Social.OAuth2.GrantType.AuthorizationCode">
            <summary>
            Denotes the server-side authorization flow, and is 
            associated with the response_type=code parameter value.
            </summary>
        </member>
        <member name="F:Spring.Social.OAuth2.GrantType.ImplicitGrant">
            <summary>
            Denotes the client-side authorization flow and is 
            associated with the response_type=token parameter value.
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth2.IOAuth2Operations">
            <summary>
            A service interface for the OAuth 2 flow. 
            This interface allows you to conduct the "OAuth dance" with a service provider on behalf of a user.
            </summary>
            <author>Keith Donald</author>
            <author>Roy Clarkson</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth2.IOAuth2Operations.BuildAuthorizeUrl(Spring.Social.OAuth2.GrantType,Spring.Social.OAuth2.OAuth2Parameters)">
            <summary>
            Construct the URL to redirect the user to for authorization.
            </summary>
            <param name="grantType">
            Specifies whether to use client-side or server-side OAuth flow.
            </param>
            <param name="parameters">
            Authorization parameters needed to build the URL. May be null.
            </param>
            <returns>
            The absolute authorize URL to redirect the user to for authorization.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth2.IOAuth2Operations.BuildAuthenticateUrl(Spring.Social.OAuth2.GrantType,Spring.Social.OAuth2.OAuth2Parameters)">
            <summary>
            Construct the URL to redirect the user to for authentication. 
            <para/>
            The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times.
            This provides a better user experience for "Sign in with Provider" scenarios.
            </summary>
            <param name="grantType">
            Specifies whether to use client-side or server-side OAuth flow.
            </param>
            <param name="parameters">
            Authorization parameters needed to build the URL. May be null.
            </param>
            <returns>The absolute authenticate URL to redirect the user to for authorization.</returns>
        </member>
        <member name="M:Spring.Social.OAuth2.IOAuth2Operations.ExchangeForAccessAsync(System.String,System.String,Spring.Collections.Specialized.NameValueCollection,System.Action{Spring.Rest.Client.RestOperationCompletedEventArgs{Spring.Social.OAuth2.AccessGrant}})">
            <summary>
            Exchange the authorization code for an access grant.
            </summary>
            <param name="authorizationCode">
            The authorization code returned by the provider upon user authorization.
            </param>
            <param name="redirectUri">
            The authorization callback url; this value must match the redirectUri registered with the provider.
            </param>
            <param name="additionalParameters">
            Any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded.
            </param>
            <param name="operationCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous request completes. 
            Provides the OAuth2 access token.
            </param>
            <returns>
            A <see cref="T:Spring.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth2.IOAuth2Operations.RefreshAccessAsync(System.String,System.String,Spring.Collections.Specialized.NameValueCollection,System.Action{Spring.Rest.Client.RestOperationCompletedEventArgs{Spring.Social.OAuth2.AccessGrant}})">
            <summary>
            Refreshes a previous access grant.
            </summary>
            <param name="refreshToken">The refresh token from the previous access grant.</param>
            <param name="scope">
            Optional scope to narrow to when refreshing access; if null, the existing scope is preserved.
            </param>
            <param name="additionalParameters">
            Any additional parameters to be sent when refreshing a previous access grant. Should not be encoded.
            </param>
            <param name="operationCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous request completes. 
            Provides the OAuth2 access token.
            </param>
            <returns>
            A <see cref="T:Spring.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="T:Spring.Social.OAuth2.OAuth2Parameters">
            <summary>
            Parameters for building an OAuth2 authorize URL.
            </summary>
            <author>Roy Clarkson</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Parameters.#ctor">
            <summary>
            Creates a new, empty instance of the <see cref="T:Spring.Social.OAuth2.OAuth2Parameters"/> class. 
            Use properties to add parameters after construction.
            </summary>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Parameters.GetFirst(System.String)">
            <summary>
            Returns the first value for the given key.
            </summary>
            <param name="key">The key.</param>
            <returns>The first value for the specified key, or <see langword="null"/>.</returns>
        </member>
        <member name="P:Spring.Social.OAuth2.OAuth2Parameters.RedirectUrl">
            <summary>
            Gets or sets the authorization callback url.
            <para/>
            This value must match the redirectUri registered with the provider.
            <para/>
            This is optional per the OAuth 2 spec, but required by most OAuth 2 providers. 
            </summary>
        </member>
        <member name="P:Spring.Social.OAuth2.OAuth2Parameters.Scope">
            <summary>
            Gets or sets the permissions the application is seeking with the authorization (optional).
            </summary>
        </member>
        <member name="P:Spring.Social.OAuth2.OAuth2Parameters.State">
            <summary>
            Gets or sets an opaque key that must be included in the provider's authorization callback (optional).
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth2.OAuth2RequestInterceptor">
            <summary>
            <see cref="T:Spring.Http.Client.Interceptor.IClientHttpRequestBeforeInterceptor"/> implementation that adds the OAuth2 access token 
            to protected resource requests before execution.
            </summary>
            <author>Keith Donald</author>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2RequestInterceptor.#ctor(System.String,Spring.Social.OAuth2.OAuth2Version)">
            <summary>
            Creates an OAuth 2.0 protected resource request interceptor.
            </summary>
            <param name="accessToken">The access token and secret.</param>
            <param name="oauth2Version">The version of the OAuth2 Core specification.</param>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2RequestInterceptor.BeforeExecute(Spring.Http.Client.Interceptor.IClientHttpRequestContext)">
            <summary>
            The callback method before the given request is executed.
            </summary>
            <remarks>
            This implementation sets the 'Authorization' header.
            </remarks>
            <param name="request">The request context.</param>
        </member>
        <member name="T:Spring.Social.OAuth2.OAuth2Template">
            <summary>
            <see cref="T:Spring.Social.OAuth2.IOAuth2Operations"/> implementation that uses REST template to make the OAuth calls.
            </summary>
            <author>Keith Donald</author>
            <author>Roy Clarkson</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Template.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an OAuth2Template.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="clientSecret">The client password.</param>
            <param name="authorizeUrl">The URL of the provider's authorization endpoint.</param>
            <param name="accessTokenUrl">The URL of the provider's access token endpoint.</param>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Template.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an OAuth2Template.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="clientSecret">The client password.</param>
            <param name="authorizeUrl">The URL of the provider's authorization endpoint.</param>
            <param name="authenticateUrl">The URL of the provider's end-user authorization endpoint.</param>
            <param name="accessTokenUrl">The URL of the provider's access token endpoint.</param>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Template.BuildAuthorizeUrl(Spring.Social.OAuth2.GrantType,Spring.Social.OAuth2.OAuth2Parameters)">
            <summary>
            Construct the URL to redirect the user to for authorization.
            </summary>
            <param name="grantType">
            Specifies whether to use client-side or server-side OAuth flow.
            </param>
            <param name="parameters">
            Authorization parameters needed to build the URL. May be null.
            </param>
            <returns>
            The absolute authorize URL to redirect the user to for authorization.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Template.BuildAuthenticateUrl(Spring.Social.OAuth2.GrantType,Spring.Social.OAuth2.OAuth2Parameters)">
            <summary>
            Construct the URL to redirect the user to for authentication.
            <para/>
            The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times.
            This provides a better user experience for "Sign in with Provider" scenarios.
            </summary>
            <param name="grantType">
            Specifies whether to use client-side or server-side OAuth flow.
            </param>
            <param name="parameters">
            Authorization parameters needed to build the URL. May be null.
            </param>
            <returns>The absolute authenticate URL to redirect the user to for authorization.</returns>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Template.ExchangeForAccessAsync(System.String,System.String,Spring.Collections.Specialized.NameValueCollection,System.Action{Spring.Rest.Client.RestOperationCompletedEventArgs{Spring.Social.OAuth2.AccessGrant}})">
            <summary>
            Exchange the authorization code for an access grant.
            </summary>
            <param name="authorizationCode">
            The authorization code returned by the provider upon user authorization.
            </param>
            <param name="redirectUri">
            The authorization callback url; this value must match the redirectUri registered with the provider.
            </param>
            <param name="additionalParameters">
            Any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded.
            </param>
            <param name="operationCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous request completes. 
            Provides the OAuth2 access token.
            </param>
            <returns>
            A <see cref="T:Spring.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Template.RefreshAccessAsync(System.String,System.String,Spring.Collections.Specialized.NameValueCollection,System.Action{Spring.Rest.Client.RestOperationCompletedEventArgs{Spring.Social.OAuth2.AccessGrant}})">
            <summary>
            Refreshes a previous access grant.
            </summary>
            <param name="refreshToken">The refresh token from the previous access grant.</param>
            <param name="scope">
            Optional scope to narrow to when refreshing access; if null, the existing scope is preserved.
            </param>
            <param name="additionalParameters">
            Any additional parameters to be sent when refreshing a previous access grant. Should not be encoded.
            </param>
            <param name="operationCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous request completes. 
            Provides the OAuth2 access token.
            </param>
            <returns>
            A <see cref="T:Spring.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Template.CreateRestTemplate">
            <summary>
            Creates the <see cref="P:Spring.Social.OAuth2.OAuth2Template.RestTemplate"/> used to communicate with the provider's OAuth 2 API.
            </summary>
            <remarks>
            This implementation creates a RestTemplate with a minimal set of HTTP message converters: 
            <see cref="T:Spring.Http.Converters.FormHttpMessageConverter"/> and <see cref="T:Spring.Http.Converters.Json.SpringJsonHttpMessageConverter"/>. 
            May be overridden to customize how the RestTemplate is created. 
            For example, if the provider returns data in some format other than JSON for form-encoded, 
            you might override to register an appropriate message converter. 
            </remarks>
            <returns>The RestTemplate used to perform OAuth2 calls.</returns>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Template.PostForAccessGrantAsync(System.String,Spring.Collections.Specialized.NameValueCollection,System.Action{Spring.Rest.Client.RestOperationCompletedEventArgs{Spring.Social.OAuth2.AccessGrant}})">
            <summary>
            Asynchronously posts the request for an access grant to the provider.
            </summary>
            <remarks>
            The default implementation uses RestTemplate to request the access token and expects a JSON response to be bound to a dictionary.
            The information in the dictionary will be used to create an <see cref="T:Spring.Social.OAuth2.AccessGrant"/>.
            Since the OAuth 2 specification indicates that an access token response should be in JSON format, there's often no need to override this method.
            If all you need to do is capture provider-specific data in the response, you should override CreateAccessGrant() instead.
            However, in the event of a provider whose access token response is non-JSON, 
            you may need to override this method to request that the response be bound to something other than a dictionary.
            For example, if the access token response is given as form-encoded, this method should be overridden to call RestTemplate.PostForObject() 
            asking for the response to be bound to a NameValueCollection (whose contents can then be used to create an <see cref="T:Spring.Social.OAuth2.AccessGrant"/>).
            </remarks>
            <param name="accessTokenUrl">The URL of the provider's access token endpoint.</param>
            <param name="request">The request data to post to the access token endpoint.</param>
            <param name="operationCompleted">
            The <code>Action&lt;T&gt;</code> to perform when the asynchronous request completes. 
            Provides the OAuth2 access token.
            </param>
            <returns>
            A <see cref="T:Spring.Rest.Client.RestOperationCanceler"/> instance that allows to cancel the asynchronous operation.
            </returns>
        </member>
        <member name="M:Spring.Social.OAuth2.OAuth2Template.CreateAccessGrant(System.String,System.String,System.String,System.Nullable{System.Int32},Spring.Json.JsonValue)">
            <summary>
            Creates an <see cref="T:Spring.Social.OAuth2.AccessGrant"/> given the response from the access token exchange with the provider.
            </summary>
            <remarks>
            May be overridden to create a custom AccessGrant that captures provider-specific information from the access token response. 
            </remarks>
            <param name="accessToken">The access token value received from the provider.</param>
            <param name="scope">The scope of the access token.</param>
            <param name="refreshToken">A refresh token value received from the provider.</param>
            <param name="expiresIn">The time (in seconds) remaining before the access token expires.</param>
            <param name="response">The JSON response received in the access token exchange.</param>
            <returns>The OAuth2 access token.</returns>
        </member>
        <member name="P:Spring.Social.OAuth2.OAuth2Template.RestTemplate">
            <summary>
            Gets a reference to the REST client used to perform OAuth2 calls. 
            </summary>
        </member>
        <member name="T:Spring.Social.OAuth2.OAuth2Version">
            <summary>
            Various versions of the OAuth 2 specification.
            </summary>
            <remarks>
            Used by <see cref="T:Spring.Social.OAuth2.OAuth2Template"/> to vary its behavior by the configured version.
            </remarks>
            <author>Keith Donald</author>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="F:Spring.Social.OAuth2.OAuth2Version.Bearer">
            <summary>
            OAuth Version 2.0 using bearer tokens (since Draft 12).
            </summary>
        </member>
        <member name="F:Spring.Social.OAuth2.OAuth2Version.Draft10">
            <summary>
            OAuth Version 2.0 Draft 10.
            </summary>
        </member>
        <member name="F:Spring.Social.OAuth2.OAuth2Version.Draft8">
            <summary>
            OAuth Version 2.0 Draft 8.
            </summary>
        </member>
        <member name="T:Spring.Social.SocialException">
            <summary>
            The exception that is thrown when a problem occurred performing an operation against a service provider. 
            </summary>
            <remarks>
            This exception class is abstract, as it is too generic for actual use. 
            When a <see cref="T:Spring.Social.SocialException"/> is thrown, it should be one of the more specific subclasses.
            </remarks>
            <author>Craig Walls</author>
            <author>Bruno Baia (.NET)</author>
        </member>
        <member name="M:Spring.Social.SocialException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Social.SocialException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
        </member>
        <member name="M:Spring.Social.SocialException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Social.SocialException"/> class.
            </summary>
            <param name="message">A message about the exception.</param>
            <param name="innerException">The inner exception that is the cause of the current exception.</param>
        </member>
    </members>
</doc>
